專案名稱：捲簾估價應用程式 (Roller Blind Quotation App)
交接日期：2025年8月26日

==================================================

## 1. 專案目標 (Project Goal)

本專案的核心目標是開發一個基於 Web 技術的「捲簾估價應用程式」。此應用程式旨在解決現有估價流程過於複雜、依賴人工計算、耗時且容易出錯的問題。系統將建立一套標準化、自動化的計價流程，以提升銷售人員的工作效率與報價的準確性。

## 2. 當前進度 (Current Status)

專案已完成「第一階段：視覺探索與需求確認」及「第二階段：核心架構與數據模型設計」的所有規劃工作。

目前專案正處於**「第三階段：垂直切片開發與迭代」**的**中期**。我們已經完成了第一個核心功能「快速估價」頁面的大部分 UI 互動邏輯。

**已完成的工作包括：**
* 所有面向客戶的文件（報價單、詳細清單）與內部操作介面（快速估價頁面）的視覺設計與 HTML 靜態版型。
* 完整的應用程式操作流程與所有核心商業邏輯的定義。
* 包含所有必要欄位的數據結構藍圖。
* 從供應商 PDF 轉譯的價格矩陣數據。
* 基礎開發環境的搭建 (`index.html` 及所有核心 `.js` 模組檔案)。
* 已解決所有本地預覽的環境配置與跨域問題，並確立了以 GitHub Pages 為主的標準測試流程。
* **已實現「快速估價」頁面大部分的 UI 互動，包括：**
    * 上下/左右滑動的鍵盤面板。
    * 虛擬鍵盤的數字輸入、刪除、模式切換 (`W`/`H`) 功能。
    * 將輸入值新增至結果表格，並自動新增下一行。
    * 點擊表格儲存格以編輯現有數值。
    * 輸入值的範圍驗證與錯誤提示。
    * `TYPE` 欄位的單點循環與表頭批次設定功能。
    * `TYPE` 欄位根據內容顯示不同字體樣式。

## 3. 核心開發理念與流程 (Core Development Philosophy & Flow)

* **開發方法論**: 專案遵循「由外而內，混合驅動」的理念，先定義視覺與需求，再進行架構驅動的開發。
* **兩階段估價流程**:
    1.  **快速估價 (Quick Quote)**: 供銷售人員現場使用的極簡介面，僅輸入寬、高、類型，快速獲取概算總價。
    2.  **詳細規格設定 (MOL - Measurements & Order List)**: 內部專用的詳細設定頁面，用於配置馬達、配件等所有細節，產出最終精確報價。
* **系統架構**: 採用「事件驅動」的高度解耦架構。系統由十大核心模組構成（詳見專案開發計畫書），模組間透過一個中央事件聚合器 (`EventAggregator`) 進行非同步通訊。

## 4. **首要執行任務 (Immediate Next Task)**

**任務目標：為「快速估價」頁面，實現最終的價格計算與匯總功能。**

**具體步驟：**
1.  **目標模組**: `input-handler.js`, `state-manager.js`, `price-calculator.js`。
2.  **實現 `input-handler.js`**:
    * 為結果表格中 `Price` 欄位的**表頭 (`<th>`)** 綁定點擊事件。
    * 當 `Price` 表頭被點擊時，`InputHandler` 需發布一個新的語義化事件，例如 `userRequestedPriceCalculation`。
3.  **實現 `state-manager.js`**:
    * `StateManager` 需監聽 `userRequestedPriceCalculation` 事件。
    * 當監聽到事件時，它應遍歷其內部儲存的 `rollerBlindItems` 陣列。
    * 對於每一筆**已完整輸入**（寬、高、類型皆有值）的項目，`StateManager` 應發布一個 `calculatePriceForRow` 事件，並附上該筆項目的數據。
4.  **實現 `price-calculator.js`**:
    * `PriceCalculator` 需監聽 `calculatePriceForRow` 事件。
    * 接收到事件後，根據傳入的布料類型 (`fabricType`)，從 `ConfigManager` 獲取對應的價格矩陣。
    * 執行矩陣查價演算法，計算出價格。
    * 計算完成後，發布一個 `priceCalculatedForRow` 事件，並附上該筆項目的 `itemId` 和計算出的 `price`。
5.  **完成閉環**:
    * `StateManager` 監聽 `priceCalculatedForRow` 事件，並將價格更新回對應的項目中。
    * 最後，發布 `stateChanged` 事件，`UIManager` 會自動將計算出的價格渲染到畫面上。

## **5. 專案文件索引 (Project File Index)**

* **專案開發計畫書**: ` /01-project-docs/產品估價應用程式_專案開發計畫_v2.3.docx `
* **工作流程與商業邏輯**: ` /01-project-docs/workflow-and-business-logic_zh-TW.txt `
* **UI 設計理據**: ` /01-project-docs/ui-design-rationale_zh-TW.txt `
* **主應用程式入口**: ` /index.html `
* **最終報價單 (客戶版型)**: ` /02-ui/quote-template-final.html `
* **最終詳細清單 (客戶附錄版型)**: ` /02-ui/detailed-item-list-final.html `
* **數據結構藍圖**: ` /03-data-models/quote-data-structure-final.js `
* **價格矩陣數據**: ` /03-data-models/price-matrix_v1.0.json `
